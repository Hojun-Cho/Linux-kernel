# tracer: function
#
# entries-in-buffer/entries-written: 2286/2286   #P:4
#
#                              _-----=> irqs-off
#                             / _----=> need-resched
#                            | / _---=> hardirq/softirq
#                            || / _--=> preempt-depth
#                            ||| /     delay
#           TASK-PID   CPU#  ||||    TIMESTAMP  FUNCTION
#              | |       |   ||||       |         |
                                          137번 sys_call로 statf가 발생 check 가능
   super_block_c-25665 [000] ....  4348.577129: sys_enter: NR 137 (7ffc0337dfb0, 7ffc0337df30, 7ffc0337df30, fffffffc, 0, 7fc6e65bd440)
   super_block_c-25665 [000] ....  4348.577129: ext4_statfs+0x0/0x260 <-statfs_by_dentry+0x67/0x90
   super_block_c-25665 [000] ....  4348.577129: <stack trace>
 => 0xffffffffc0001061
 => ext4_statfs+0x5/0x260
################################
static int statfs_by_dentry(struct dentry *dentry, struct kstatfs *buf)
{
	int retval;
  ....
          dentry 객체에서 d_sb로 파일의 슈퍼블록 객체에 접근하고 
          슈퍼블록 객체의 슈퍼블록 오퍼레이션을 호출 여기서 각 파일시스템에 맞는 동작의 함수 주소를 함수 포인터로 저장하고 있음.
          즉 ext4의 경우 ext4_statfs를 호출 
	retval = dentry->d_sb->s_op->statfs(dentry, buf);
  ....
	return retval;
}
################################
 => statfs_by_dentry+0x67/0x90
 => vfs_statfs+0x16/0xc0
 => user_statfs+0x54/0xa0
 => __do_sys_statfs+0x20/0x50
 => do_syscall_64+0x48/0x120
 => entry_SYSCALL_64_after_hwframe+0x44/0xa9
   super_block_c-25665 [000] ....  4348.577129: sys_exit: NR 137 = 0
   super_block_c-25665 [000] ....  4348.577129: sys_enter: NR 1 (1, 565525bb9260, 1b, fffffffb, 7ffc0337dfb0, 7fc6e65bd260)
   super_block_c-25665 [000] ....  4348.577129: sys_exit: NR 1 = 27
   super_block_c-25665 [000] ....  4348.577129: sys_enter: NR 137 (7ffc0337dfb0, 7ffc0337df30, 7ffc0337df30, fffffffb, 0, 7fc6e65bd260)
   super_block_c-25665 [000] ....  4348.577129: simple_statfs+0x0/0x30 <-statfs_by_dentry+0x67/0x90
   super_block_c-25665 [000] ....  4348.577129: <stack trace>
 => 0xffffffffc0001061
 => simple_statfs+0x5/0x30
 => statfs_by_dentry+0x67/0x90
 => vfs_statfs+0x16/0xc0
 => user_statfs+0x54/0xa0
 => __do_sys_statfs+0x20/0x50
 => do_syscall_64+0x48/0x120
 => entry_SYSCALL_64_after_hwframe+0x44/0xa9
   super_block_c-25665 [000] ....  4348.577129: sys_exit: NR 137 = 0
   super_block_c-25665 [000] ....  4348.577129: sys_enter: NR 231 (0, 3c, 0, 2, e7, ffffffffffffff80)
   super_block_c-25665 [000] d...  4348.577129: sched_switch: prev_comm=super_block_c prev_pid=25665 prev_prio=120 prev_state=Z ==> next_comm=bash next_pid=25648 next_prio=120
            bash-25648 [000] ....  4348.577129: sys_exit: NR 61 = 25665
            bash-25648 [000] ....  4348.577129: sys_enter: NR 14 (0, 7ffd52816f90, 7ffd52817010, 8, 55cde6330290, 55cde634ee60)



statfs를 호출하면  파일 시스템에 대한 정보를 반환한다.
simple_statfs 는 /proc 
ext4_statfs 는 일반 파일이다

유저 공간에서 파일 디렉터리를 인자 삼아 statfs()를 호출하면  vfs에서는 각각에 맞는 오퍼레이션을 수행 
statfs를 통해 파일 정블 읽어옴 

####################
슈퍼블록
  파일 시스템별로 등록돼 있다.
  파일 시스템별로 등록된 슈퍼 블록 함수 오퍼레이션으로 아이노드를 생성하고 해제하는 동작을 수행한다.

struct super_block {
	struct list_head	s_list;	슈퍼 블록을 연결하는 연결 리스트 포인터 
	dev_t			s_dev;	디바이스 식별자(디바이스가 존재하지 않는 시스템도 존재 /proc...)
	const struct super_operations	*s_op; 슈퍼블록 오퍼레이션 => 각각의 시스템에 맞는 함수 포인터들
	unsigned long		s_magic; 파일 시스템 고유 번호 (매직넘버)
	struct dentry		*s_root; 파일 시스템의 루트 디렉터리에 대한 객체 
}



####################

struct statfs {
   long    f_type;     파일 시스템 타입 
   long    f_blocks;   파일 시스템내 총 데이터 블럭들 
   long    f_bfree;    파일 시스템내 여유 블럭들 
   long    f_files;    파일 시스템내 총 파일 노드들 
   long    f_ffree;    파일 시스템내 여유 파일 노드들 
   fsid_t  f_fsid;     파일 시스템 ID 
   ...
};
	
####################