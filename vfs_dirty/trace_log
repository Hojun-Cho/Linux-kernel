# tracer: function
파일에 변경,생성이 일어나면 리눅스는 아이노드의 상태를 dirty로 바꾼다.
dirty는 디스크까지 접근 속도가 cpu나 메모리에 비해 느리기 때문에 바로 디스크에 변경 사항을 저장하지 않고 
일정시간 대기한다. 그 후 디스크에 쓴다.
즉 dirty는 현재 파일의 변경을 나타낸다. dirty인 inode가 있다면 그 파일은 디스크와 동기화해야 하는 상태이다.
 jpa에도 dirty check가 존재한다(1차캐시). jpa에서는 dirty check를 통해 데이터의 무결성을 지켜준다 

#
# entries-in-buffer/entries-written: 32/32   #P:4
#
#                              _-----=> irqs-off
#                             / _----=> need-resched
#                            | / _---=> hardirq/softirq
#                            || / _--=> preempt-depth
#                            ||| /     delay
#           TASK-PID   CPU#  ||||    TIMESTAMP  FUNCTION
#              | |       |   ||||       |         |
           <...>-587   [001] ....   948.861117: ext4_dirty_inode+0x0/0x60 <-__mark_inode_dirty+0x14e/0x3c0
           <...>-587   [001] ....   948.861117: <stack trace>
 => 0xffffffffc0159061
######################## 
journal (일기장): 파일 시스템에 데이터를 기록하기 전에 모든 데이터를 저널에 넘긴 뒤 기록하는 방식.
가장 안전한 모드이다. 하지만 매번 같은 데이터를 두번씩 저장하는 꼴(저널 + 디스크) 이므로 성능이 떨어지게 된다.
https://blog.daum.net/rayolla/48
밑에서 다시 정리하자
void ext4_dirty_inode(struct inode *inode, int flags) =>linux 4.8v 
{
    ...
	handle = ext4_journal_start(inode, EXT4_HT_INODE, 2); => 저널에 기록
	if (IS_ERR(handle))
		goto out;

	ext4_mark_inode_dirty(handle, inode);

	ext4_journal_stop(handle);
    ... 
}

########################/*
 * ext4_dirty_inode()는 __mark_inode_dirty()에서 호출됩니다.
 *
 * 우리는 파일이 확장되는 경우에 정말 관심이 있습니다.
 * i_size는 generic_commit_write()에 의해 변경되었으므로 다음이 필요합니다.
 * 현재 트랜잭션에 업데이트된 inode를 포함합니다.
 *
 *
 만약 아이노드가 동기식으로 표시되어 있다면, 우리는 여기서 그것을 존중하지 않는다. => 동기식으로 처리하지 않는다 ?? 
 시간 업데이트에 대한 커밋을 일으킬 수 있습니다.  => 동기식이 아니라서 먼저 시간 업데이트 커밋이 발생??
 우리는 동기식 아이노드를 최대한 높은 수준으로 처리합니다. => ???????????진짜 모르겠다
 *
/*


 => ext4_dirty_inode+0x5/0x60
 ########################
 * inode가 더러워지고 있음을 파일 시스템에 알립니다.
 * (필요한 경우) 디스크 상의 필드를 업데이트하고 저널링할 수 있습니다.
 * 아이노드. 이것은 inode 자체가 실행 중일 때만 필요합니다.
 * 이제 더러워졌습니다. 즉. I_DIRTY_INODE에만 필요하며 필요하지 않습니다.
 * I_DIRTY_PAGES 또는 I_DIRTY_TIME 동안만. 
 정리하면 대충 inode가 dirty 상태라고 시스템에 알린다는 의미인듯...
 /*

 if (sb->s_op->dirty_inode)
    sb->s_op->dirty_inode(inode, flags & I_DIRTY_INODE);

이렇게 슈퍼블럭에 등록된 dirty_inode를 호출한다 

 => __mark_inode_dirty+0x14e/0x3c0
 #########################
 inode->i_atime = *time; 
inode에 현재 시각을 기록 
 => generic_update_time+0x9f/0xd0
 #########################
 now = current_time(inode);
 inode_update_time(inode, &now, S_ATIME);
 파일에 수정 시각을 기록한다.
 그리고 inode_update_time를 호출해서 

 if (inode->i_op->update_time)
    return inode->i_op->update_time(inode, time, flags);
return generic_update_time(inode, time, flags);

만약 업데이트된 파일이라면 update_time의 흐름 
새로 생성된 파일이라면 generic_update_time의 흐름 

나는 파일을 새로 생성해서 generic_update_time으로 흘러간다 

 => touch_atime+0xb0/0xd0
 #########################
 => trailing_symlink+0x22d/0x250
 => path_lookupat+0x7b/0x210
 => filename_lookup+0xb6/0x190
 => vfs_statx+0x73/0xe0
 => __do_sys_newstat+0x39/0x70
 => do_syscall_64+0x48/0x120
 => entry_SYSCALL_64_after_hwframe+0x44/0xa9



 journaling을 통해서 파일을 찾을 때 디스크에 직접 가지 말고 저널링된 정보를 바탕을 찾는다
 즉 저널을 캐쉬처럼 이용이 가능하다 
 캐쉬처럼 이용하는 방법에는 2가지 방법이 존재한다
 1. Write Through (실시간으로 저널에 기록)
    실기낭 용략 기록을 남기닊나 복구 측면에서 good 하지만 실시간이라서 좀 느리다.
 2. Write Back (실재 일을 다 마치고 나서 저널에 기록)
    실제 저장장치에 저장되다가 저장 장치가 훼손 되면 문제가 발생.
    일을 다 마치고 기록하니 언제 문제가 생겼는지 알기 힘듬

    그럼 Write Back은 왜 사용??
        Write Through가 캐시 역활을 하면서 오히려 병목 현상이 발생 
        하지만 Write Back은 이런 기록 과정을 최소화 하는 기법.

        실서버에서 사용하는 저장장치에서 사용하기에는 너무나 위험한 Write Back 
        => 복구가 어려움 