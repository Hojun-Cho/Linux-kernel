# tracer: function
#
# entries-in-buffer/entries-written: 10124/10124   #P:4
#
#                              _-----=> irqs-off
#                             / _----=> need-resched
#                            | / _---=> hardirq/softirq
#                            || / _--=> preempt-depth
#                            ||| /     delay
#           TASK-PID   CPU#  ||||    TIMESTAMP  FUNCTION
#              | |       |   ||||       |         |
  

          ### bash에서 실행된 nano 를 wait4 system call로 enter 
            bash-2164  [003] ....  4688.766974: sys_enter: NR 61 (ffffffff, 7ffd2afb2b90, a, 0, 5580edf15690, 8)
          ### nano에디터가 부모에서	clone 이 정상적으로 끝나서 exit  
            nano-2184  [002] ....  4688.768067: sys_exit: NR 56 = 0
          ### 현재 자신의 pid를 얻어온다 2184 번
            nano-2184  [002] ....  4688.768067: sys_enter: NR 39 (1200011, 0, 0, 7f815d757a10, 7f815d757740, 0)
            nano-2184  [002] ....  4688.768067: sys_exit: NR 39 = 2184
        
            nano-2184  [002] ....  4688.768067: sys_enter: NR 14 (2, 5580ed928b00, 0, 8, 7f815d757740, 0)
            nano-2184  [002] ....  4688.768067: sys_exit: NR 14 = 0
          ### 자신에게 수신된 신호를 check ...? ###
            nano-2184  [002] ....  4688.768067: sys_enter: NR 13 (14, 7ffd2afb2870, 7ffd2afb2910, 8, 7ffd2afb2a60, 0)
            nano-2184  [002] ....  4688.768067: sys_exit: NR 13 = 0
            nano-2184  [002] ....  4688.768067: sys_enter: NR 13 (15, 7ffd2afb2870, 7ffd2afb2910, 8, 7ffd2afb2a60, 0)
            nano-2184  [002] ....  4688.768067: sys_exit: NR 13 = 0
            nano-2184  [002] ....  4688.768067: sys_enter: NR 13 (16, 7ffd2afb2880, 7ffd2afb2920, 8, 7ffd2afb2a70, 0)
            nano-2184  [002] ....  4688.768067: sys_exit: NR 13 = 0

          ### setpgid 그룹 PID 설정   
            nano-2184  [002] ....  4688.768067: sys_enter: NR 109 (888, 888, 7f815cd60f10, 8, 7ffd2afb2a70, 0)
            nano-2184  [002] ....  4688.768067: sys_exit: NR 109 = 0
          
            nano-2184  [002] ....  4688.768067: sys_enter: NR 14 (0, 7ffd2afb2a00, 7ffd2afb2a80, 8, 0, 0)
            nano-2184  [002] ....  4688.768067: sys_exit: NR 14 = 0
          
          ### 하드웨어를 제어하거나 상태 정보를 확인하는 ioctl
            nano-2184  [002] ....  4688.768067: sys_enter: NR 16 (ff, 5410, 7ffd2afb29ec, 8, 0, 0)
            nano-2184  [002] ....  4688.768067: sys_exit: NR 16 = 0

          ### 뭘 실행하는 ...? execve
            nano-2184  [002] ....  4688.768067: sys_enter: NR 59 (5580edf24d50, 5580edf24dd0, 5580edeefc20, 5580ededc010, 7ffd2afb2b80, 0)



######################################################################################################################################################

          ### brk 프로그램의 break location을 증가시켜 메모리를 획득한다. 즉 brk를 통해서 break location을 올려 메모리 영역을 확보한다
        
          brk 할당하기 전  break location  55d992587000-55d9925a8000 rw-p 00000000 00:00 0                          [heap]
          brk 할당한 후    break location  55d992587000-55d9925a9000 rw-p 00000000 00:00 0                          [heap]

          break loctaion이 4096(1kbyte)만큼 올라감
          ### mmap 의 경우는 하나의 프로세스 메모리 영역에 메모리를 할당함 
          ## mmap 전
          564a0b6ad000-564a0b6ae000 r-xp 00000000 08:02 9592                       /home/reallinux/deepdive/syscall_2/mmap
          564a0b8ad000-564a0b8ae000 r--p 00000000 08:02 9592                       /home/reallinux/deepdive/syscall_2/mmap
          564a0b8ae000-564a0b8af000 rw-p 00001000 08:02 9592                       /home/reallinux/deepdive/syscall_2/mmap
          564a0befb000-564a0bf1c000 rw-p 00000000 00:00 0                          [heap]
          7f5bd62a4000-7f5bd648b000 r-xp 00000000 08:02 918138                     /lib/x86_64-linux-gnu/libc-2.27.so
          7f5bd648b000-7f5bd668b000 ---p 001e7000 08:02 918138                     /lib/x86_64-linux-gnu/libc-2.27.so
          7f5bd668b000-7f5bd668f000 r--p 001e7000 08:02 918138                     /lib/x86_64-linux-gnu/libc-2.27.so
          7f5bd668f000-7f5bd6691000 rw-p 001eb000 08:02 918138                     /lib/x86_64-linux-gnu/libc-2.27.so
          7f5bd6691000-7f5bd6695000 rw-p 00000000 00:00 0
          7f5bd6695000-7f5bd66be000 r-xp 00000000 08:02 918134                     /lib/x86_64-linux-gnu/ld-2.27.so
          7f5bd68ae000-7f5bd68b0000 rw-p 00000000 00:00 0
          7f5bd68be000-7f5bd68bf000 r--p 00029000 08:02 918134                     /lib/x86_64-linux-gnu/ld-2.27.so
          7f5bd68bf000-7f5bd68c0000 rw-p 0002a000 08:02 918134                     /lib/x86_64-linux-gnu/ld-2.27.so
          7f5bd68c0000-7f5bd68c1000 rw-p 00000000 00:00 0
          7ffcd08ea000-7ffcd090b000 rw-p 00000000 00:00 0                          [stack]
          7ffcd099b000-7ffcd099e000 r--p 00000000 00:00 0                          [vvar]
          7ffcd099e000-7ffcd099f000 r-xp 00000000 00:00 0                          [vdso]
          ffffffffff600000-ffffffffff601000 --xp 00000000 00:00 0                  [vsyscall]

          ## mmap 후 
          564a0b6ad000-564a0b6ae000 r-xp 00000000 08:02 9592                       /home/reallinux/deepdive/syscall_2/mmap
          564a0b8ad000-564a0b8ae000 r--p 00000000 08:02 9592                       /home/reallinux/deepdive/syscall_2/mmap
          564a0b8ae000-564a0b8af000 rw-p 00001000 08:02 9592                       /home/reallinux/deepdive/syscall_2/mmap
          564a0befb000-564a0bf1c000 rw-p 00000000 00:00 0                          [heap]
          7f5bd62a4000-7f5bd648b000 r-xp 00000000 08:02 918138                     /lib/x86_64-linux-gnu/libc-2.27.so
          7f5bd648b000-7f5bd668b000 ---p 001e7000 08:02 918138                     /lib/x86_64-linux-gnu/libc-2.27.so
          7f5bd668b000-7f5bd668f000 r--p 001e7000 08:02 918138                     /lib/x86_64-linux-gnu/libc-2.27.so
          7f5bd668f000-7f5bd6691000 rw-p 001eb000 08:02 918138                     /lib/x86_64-linux-gnu/libc-2.27.so
          7f5bd6691000-7f5bd6695000 rw-p 00000000 00:00 0
          7f5bd6695000-7f5bd66be000 r-xp 00000000 08:02 918134                     /lib/x86_64-linux-gnu/ld-2.27.so
          
      ### 7f5bd688d000-7f5bd68b0000 rw-p 00000000 00:00 0##################################################   mmap으로 메모리 할당 

          7f5bd68be000-7f5bd68bf000 r--p 00029000 08:02 918134                     /lib/x86_64-linux-gnu/ld-2.27.so
          7f5bd68bf000-7f5bd68c0000 rw-p 0002a000 08:02 918134                     /lib/x86_64-linux-gnu/ld-2.27.so
          7f5bd68c0000-7f5bd68c1000 rw-p 00000000 00:00 0
          7ffcd08ea000-7ffcd090b000 rw-p 00000000 00:00 0                          [stack]
          7ffcd099b000-7ffcd099e000 r--p 00000000 00:00 0                          [vvar]
          7ffcd099e000-7ffcd099f000 r-xp 00000000 00:00 0                          [vdso]
          ffffffffff600000-ffffffffff601000 --xp 00000000 00:00 0                  [vsyscall]

    ### unmap을 호출하면 해당 메모리 영역  7f5bd68b0000이 반환 된다.

   ### https://code1018.tistory.com/221      
######################################################################################################################################################
